{"ast":null,"code":"import _toConsumableArray from \"/Users/thunguyen/Downloads/tic-tac-toe-valentine/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"/Users/thunguyen/Downloads/tic-tac-toe-valentine/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/Users/thunguyen/Downloads/tic-tac-toe-valentine/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useState } from \"react\";\nimport { types, pieces } from \"../constants/action.types\";\nimport { isWinning } from \"../algorithm/main\";\nvar initalState = {\n  numberCell: null,\n  arrayBoard: null,\n  currentPiece: pieces.X\n};\nexport var useHomePage = function useHomePage() {\n  var _useState = useState(null),\n    _useState2 = _slicedToArray(_useState, 2),\n    numberCell = _useState2[0],\n    setNumberCell = _useState2[1];\n  var _useState3 = useState(null),\n    _useState4 = _slicedToArray(_useState3, 2),\n    arrayBoard = _useState4[0],\n    setArrayBoard = _useState4[1];\n  var _useState5 = useState(pieces.X),\n    _useState6 = _slicedToArray(_useState5, 2),\n    currentPiece = _useState6[0],\n    setCurrentPiece = _useState6[1];\n  var main = function main() {\n    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initalState;\n    var action = arguments.length > 1 ? arguments[1] : undefined;\n    var updatedState = state;\n    switch (action.type) {\n      case types.SET_numberCell:\n        {\n          updatedState = _objectSpread({}, state, {\n            numberCell: parseInt(action.numberCell)\n          });\n          break;\n        }\n      case types.INIT_ARRAY:\n        {\n          updatedState = _objectSpread({}, state, {\n            arrayBoard: action.arrayBoard\n          });\n          break;\n        }\n      case types.SWITCH_PIECE:\n        {\n          updatedState = _objectSpread({}, state, {\n            currentPiece: action.data\n          });\n          break;\n        }\n      case types.TICK:\n        {\n          updatedState = _objectSpread({}, state, {\n            arrayBoard: action.array_new\n          });\n          break;\n        }\n      default:\n        updatedState = state;\n    }\n  };\n  var onSetNumberCell = function onSetNumberCell(numberCell) {\n    setNumberCell(parseInt(numberCell));\n  };\n  var onInitArray = function onInitArray(arrayBoard) {\n    setArrayBoard(arrayBoard);\n  };\n  var onTick = function onTick(array_new) {\n    setArrayBoard(array_new);\n  };\n  var onSwitchPiece = function onSwitchPiece(data) {\n    setCurrentPiece(data);\n  };\n  var _useState7 = useState(0),\n    _useState8 = _slicedToArray(_useState7, 2),\n    count = _useState8[0],\n    setCount = _useState8[1];\n  var _useState9 = useState(-1),\n    _useState10 = _slicedToArray(_useState9, 2),\n    isWin = _useState10[0],\n    setWin = _useState10[1];\n  var _useState11 = useState(null),\n    _useState12 = _slicedToArray(_useState11, 2),\n    piecesWin = _useState12[0],\n    setPiecesWin = _useState12[1];\n  var _useState13 = useState(false),\n    _useState14 = _slicedToArray(_useState13, 2),\n    work = _useState14[0],\n    setWork = _useState14[1];\n  console.log(\"ðŸš€ ~ useHomePage ~ work:\", work);\n  var tick = function tick(row, col) {\n    if (isWin === 1) {\n      return;\n    }\n    setWork(true);\n    console.log({\n      isWin: isWin,\n      piecesWin: piecesWin,\n      work: work\n    });\n    // count number of tick \n    var count_tmp = count + 1;\n    setCount(count_tmp);\n\n    // update board \n    var newArray = _toConsumableArray(arrayBoard);\n    newArray[row][col] = currentPiece;\n    onTick(newArray);\n\n    // check win \n    var updatedPiecesWin = isWinning(newArray, row, col, currentPiece);\n    console.log(\"ðŸš€ ~ tick ~ updatedPiecesWin:\", updatedPiecesWin);\n    if (updatedPiecesWin.length > 0) {\n      console.log(\"ðŸš€ ~ tick ~ updatedPiecesWin.length:\", updatedPiecesWin.length);\n      setWin(1);\n      setPiecesWin(updatedPiecesWin);\n      setWork(true);\n      console.log({\n        isWin: isWin,\n        piecesWin: piecesWin,\n        work: work\n      });\n    } else if (count_tmp == numberCell * numberCell) {\n      setWin(0);\n    } else {\n      // switch player\n      onSwitchPiece(currentPiece == pieces.X ? pieces.O : pieces.X);\n    }\n  };\n  var reset_map = function reset_map() {\n    onInitArray(Array(numberCell).fill(null).map(function () {\n      return Array(numberCell).fill(null);\n    }));\n    onSwitchPiece(pieces.X);\n    setCount(0);\n    setWin(-1);\n    setPiecesWin(null);\n  };\n  return {\n    numberCell: numberCell,\n    currentPiece: currentPiece,\n    arrayBoard: arrayBoard,\n    onSetNumberCell: onSetNumberCell,\n    onInitArray: onInitArray,\n    onTick: onTick,\n    onSwitchPiece: onSwitchPiece,\n    tick: tick,\n    isWin: isWin,\n    piecesWin: piecesWin,\n    reset_map: reset_map\n  };\n};","map":{"version":3,"names":["useState","types","pieces","isWinning","initalState","numberCell","arrayBoard","currentPiece","X","useHomePage","_useState","_useState2","_slicedToArray","setNumberCell","_useState3","_useState4","setArrayBoard","_useState5","_useState6","setCurrentPiece","main","state","arguments","length","undefined","action","updatedState","type","SET_numberCell","_objectSpread","parseInt","INIT_ARRAY","SWITCH_PIECE","data","TICK","array_new","onSetNumberCell","onInitArray","onTick","onSwitchPiece","_useState7","_useState8","count","setCount","_useState9","_useState10","isWin","setWin","_useState11","_useState12","piecesWin","setPiecesWin","_useState13","_useState14","work","setWork","console","log","tick","row","col","count_tmp","newArray","_toConsumableArray","updatedPiecesWin","O","reset_map","Array","fill","map"],"sources":["/Users/thunguyen/Downloads/tic-tac-toe-valentine/src/hooks/index.js"],"sourcesContent":["import { useState } from \"react\";\nimport { types, pieces } from \"../constants/action.types\";\nimport { isWinning } from \"../algorithm/main\";\n\nconst initalState = {\n  numberCell: null,\n  arrayBoard: null,\n  currentPiece: pieces.X\n};\n\n\nexport const useHomePage = () => {\n  const [numberCell, setNumberCell] = useState(null)\n  const [arrayBoard, setArrayBoard] = useState(null)\n  const [currentPiece, setCurrentPiece] = useState(pieces.X)\n  \n  const main = (state = initalState, action) => {\n    let updatedState = state\n    switch (action.type) {\n      case types.SET_numberCell: {\n        updatedState ={ ...state, numberCell: parseInt(action.numberCell) };\n        break\n      }\n      case types.INIT_ARRAY: {\n        updatedState ={ ...state, arrayBoard: action.arrayBoard };\n        break\n      }\n      case types.SWITCH_PIECE: {\n        updatedState ={ ...state, currentPiece: action.data };\n        break\n      }\n      case types.TICK: {\n        updatedState ={...state, arrayBoard: action.array_new}\n        break\n      }\n      default:\n        updatedState =state;\n    }\n  };\n\n\n  const onSetNumberCell = numberCell => {\n    setNumberCell(parseInt(numberCell))\n  }\n\nconst onInitArray = arrayBoard => {\n  setArrayBoard(arrayBoard)\n}\n\nconst onTick =  (array_new) => {\n  setArrayBoard(array_new)\n}\n\nconst onSwitchPiece = (data) => {\n  setCurrentPiece(data)\n}\n\nconst [count, setCount] = useState(0)\n  const [isWin, setWin] = useState(-1)\n  const [piecesWin, setPiecesWin] = useState(null)\n  const [work, setWork] = useState(false)\n  console.log(\"ðŸš€ ~ useHomePage ~ work:\", work)\n  \n  const tick= (row, col) => {\n    if (isWin === 1) {\n      return;\n    }\n    setWork(true)\n    console.log({isWin, piecesWin, work})\n    // count number of tick \n    let count_tmp = count + 1;\n    setCount(count_tmp );\n\n    // update board \n    let newArray = [...arrayBoard];\n    newArray[row][col] = currentPiece;\n    onTick(newArray);\n\n    // check win \n    const updatedPiecesWin = isWinning(newArray, row, col, currentPiece);\n    console.log(\"ðŸš€ ~ tick ~ updatedPiecesWin:\", updatedPiecesWin)\n    if (updatedPiecesWin.length > 0) {\n      console.log(\"ðŸš€ ~ tick ~ updatedPiecesWin.length:\", updatedPiecesWin.length)\n      setWin(1)\n      setPiecesWin(updatedPiecesWin)\n      setWork(true)\n      console.log({isWin, piecesWin, work})\n    } else if (count_tmp ==  numberCell * numberCell) {\n      setWin(0)\n    } else {\n      // switch player\n      onSwitchPiece(currentPiece == pieces.X ? pieces.O : pieces.X);\n    }\n  }\n\n  const reset_map = () => {\n    onInitArray(\n      Array(numberCell)\n        .fill(null)\n        .map(() => Array(numberCell).fill(null))\n    );\n    onSwitchPiece(pieces.X);\n    setCount(0)\n    setWin(-1)\n    setPiecesWin(null)\n  }\n  \n  return {\n    numberCell,\n    currentPiece,\n    arrayBoard,\n    onSetNumberCell,\n    onInitArray,\n    onTick,\n    onSwitchPiece,\n    tick, isWin, piecesWin, reset_map\n  }\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}