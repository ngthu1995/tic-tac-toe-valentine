{"ast":null,"code":"import _objectSpread from \"/Users/thunguyen/Downloads/tic-tac-toe-valentine/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/Users/thunguyen/Downloads/tic-tac-toe-valentine/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useState } from \"react\";\nimport { types, pieces } from \"../constants/action.types\";\nvar initalState = {\n  number_cell: null,\n  array_board: null,\n  piece_current: pieces.X\n};\nexport var useHomePage = function useHomePage() {\n  var _useState = useState(null),\n    _useState2 = _slicedToArray(_useState, 2),\n    numberCell = _useState2[0],\n    setNumberCell = _useState2[1];\n  var _useState3 = useState(null),\n    _useState4 = _slicedToArray(_useState3, 2),\n    arrayBoard = _useState4[0],\n    setArrayBoard = _useState4[1];\n  var _useState5 = useState(pieces.X),\n    _useState6 = _slicedToArray(_useState5, 2),\n    switchPiece = _useState6[0],\n    setSwitchPiece = _useState6[1];\n  var main = function main() {\n    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initalState;\n    var action = arguments.length > 1 ? arguments[1] : undefined;\n    var updatedState = state;\n    switch (action.type) {\n      case types.SET_NUMBER_CELL:\n        {\n          updatedState = _objectSpread({}, state, {\n            number_cell: parseInt(action.number_cell)\n          });\n          break;\n        }\n      case types.INIT_ARRAY:\n        {\n          updatedState = _objectSpread({}, state, {\n            array_board: action.array_board\n          });\n          break;\n        }\n      case types.SWITCH_PIECE:\n        {\n          updatedState = _objectSpread({}, state, {\n            piece_current: action.data\n          });\n          break;\n        }\n      case types.TICK:\n        {\n          updatedState = _objectSpread({}, state, {\n            array_board: action.array_new\n          });\n          break;\n        }\n      default:\n        updatedState = state;\n    }\n  };\n  var handleMainAction = function handleMainAction(type, data) {\n    switch (type) {\n      case types.SET_NUMBER_CELL:\n        {\n          setNumberCell(parseInt(data));\n          break;\n        }\n      case types.INIT_ARRAY:\n        {\n          setArrayBoard(data);\n          break;\n        }\n      case types.SWITCH_PIECE:\n        {\n          setSwitchPiece(data);\n          break;\n        }\n      case types.TICK:\n        {\n          setArrayBoard(data);\n          break;\n        }\n      default:\n    }\n  };\n  var onSetNumberCell = function onSetNumberCell(number_cell) {\n    setNumberCell(parseInt(number_cell));\n  };\n  var onInitArray = function onInitArray(array_board) {\n    setArrayBoard(array_board);\n  };\n  var onTick = function onTick(array_new) {\n    setArrayBoard(array_new);\n  };\n  var onSwitchPiece = function onSwitchPiece(data) {\n    setSwitchPiece(data);\n  };\n  return {\n    numberCell: numberCell,\n    switchPiece: switchPiece,\n    arrayBoard: arrayBoard,\n    handleMainAction: handleMainAction\n  };\n};","map":{"version":3,"names":["useState","types","pieces","initalState","number_cell","array_board","piece_current","X","useHomePage","_useState","_useState2","_slicedToArray","numberCell","setNumberCell","_useState3","_useState4","arrayBoard","setArrayBoard","_useState5","_useState6","switchPiece","setSwitchPiece","main","state","arguments","length","undefined","action","updatedState","type","SET_NUMBER_CELL","_objectSpread","parseInt","INIT_ARRAY","SWITCH_PIECE","data","TICK","array_new","handleMainAction","onSetNumberCell","onInitArray","onTick","onSwitchPiece"],"sources":["/Users/thunguyen/Downloads/tic-tac-toe-valentine/src/hooks/index.js"],"sourcesContent":["import { useState } from \"react\";\nimport { types, pieces } from \"../constants/action.types\";\n\nconst initalState = {\n  number_cell: null,\n  array_board: null,\n  piece_current: pieces.X\n};\n\n\nexport const useHomePage = () => {\n  const [numberCell, setNumberCell] = useState(null)\n  const [arrayBoard, setArrayBoard] = useState(null)\n  const [switchPiece, setSwitchPiece] = useState(pieces.X)\n  \n  const main = (state = initalState, action) => {\n    let updatedState = state\n    switch (action.type) {\n      case types.SET_NUMBER_CELL: {\n        updatedState ={ ...state, number_cell: parseInt(action.number_cell) };\n        break\n      }\n      case types.INIT_ARRAY: {\n        updatedState ={ ...state, array_board: action.array_board };\n        break\n      }\n      case types.SWITCH_PIECE: {\n        updatedState ={ ...state, piece_current: action.data };\n        break\n      }\n      case types.TICK: {\n        updatedState ={...state, array_board: action.array_new}\n        break\n      }\n      default:\n        updatedState =state;\n    }\n  };\n\n  const handleMainAction = (type, data) => {\n    switch (type) {\n      case types.SET_NUMBER_CELL: {\n        setNumberCell(parseInt(data))\n        break\n      }\n      case types.INIT_ARRAY: {\n        setArrayBoard(data)\n        break\n      }\n      case types.SWITCH_PIECE: {\n        setSwitchPiece(data)\n        break\n      }\n      case types.TICK: {\n        setArrayBoard(data)\n        break\n      }\n      default:\n    }\n  }\n\n  const onSetNumberCell = number_cell => {\n    setNumberCell(parseInt(number_cell))\n  }\n\nconst onInitArray = array_board => {\n  setArrayBoard(array_board)\n}\n\nconst onTick =  (array_new) => {\n  setArrayBoard(array_new)\n}\n\nconst onSwitchPiece = (data) => {\n  setSwitchPiece(data)\n}\n  \n  return {\n    numberCell,\n    switchPiece,\n    arrayBoard,\n    handleMainAction\n  }\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}