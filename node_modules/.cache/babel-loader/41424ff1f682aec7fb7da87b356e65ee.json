{"ast":null,"code":"// Func isWin will return array have length 5 when win and return array empty\nexport var isWinning = function isWinning(board, row, col, turn) {\n  var piece_win = [];\n  // check col win\n  var index = col - 1;\n  while (index >= 0 && board[row][index] === turn) {\n    piece_win.push([row, index]);\n    index--;\n  }\n  index = col + 1;\n  while (index <= board.length - 1 && board[row][index] === turn) {\n    piece_win.push([row, index]);\n    index++;\n  }\n  if (piece_win.length >= 4) {\n    piece_win.push([row, col]);\n    return piece_win;\n  }\n\n  // check row\n  index = row - 1;\n  piece_win = [];\n  while (index >= 0 && board[index][col] === turn) {\n    piece_win.push([index, col]);\n    index--;\n  }\n  index = row + 1;\n  while (index >= 0 && index < board.length - 1 && board[index][col] === turn) {\n    piece_win.push([index, col]);\n    index++;\n  }\n  if (piece_win.length >= 4) {\n    piece_win.push([row, col]);\n    return piece_win;\n  }\n\n  // check diagonal left\n  var row_index = row - 1;\n  var col_index = col - 1;\n  piece_win = [];\n  while (row_index >= 0 && col_index >= 0 && board[row_index][col_index] === turn) {\n    piece_win.push([row_index, col_index]);\n    row_index--;\n    col_index--;\n  }\n  row_index = row + 1;\n  col_index = col + 1;\n  while (row_index >= 0 && col_index >= 0 && row_index <= board.length - 1 && col_index <= board.length - 1 && board[row_index][col_index] === turn) {\n    piece_win.push([row_index, col_index]);\n    row_index++;\n    col_index++;\n  }\n  if (piece_win.length >= 4) {\n    piece_win.push([row, col]);\n    return piece_win;\n  }\n  // check diagonal left\n  row_index = row - 1;\n  col_index = col + 1;\n  piece_win = [];\n  while (col_index >= 0 && row_index >= 0 && col_index <= board.length - 1 && board[row_index][col_index] === turn) {\n    piece_win.push([row_index, col_index]);\n    row_index--;\n    col_index++;\n  }\n  row_index = row + 1;\n  col_index = col - 1;\n  while (row_index >= 0 && row_index <= board.length - 1 && col_index >= 0 && board[row_index][col_index] === turn) {\n    piece_win.push([row_index, col_index]);\n    row_index++;\n    col_index--;\n  }\n  if (piece_win.length >= 4) {\n    piece_win.push([row, col]);\n    return piece_win;\n  }\n  return [];\n};","map":{"version":3,"names":["isWinning","board","row","col","turn","piece_win","index","push","length","row_index","col_index"],"sources":["/Users/thunguyen/Downloads/tic-tac-toe-valentine/src/algorithm/main.js"],"sourcesContent":["// Func isWin will return array have length 5 when win and return array empty\nexport const isWinning = (board, row, col, turn) => {\n  let piece_win = [];\n  // check col win\n  let index = col - 1;\n\n  while (index >= 0 && board[row][index] === turn) {\n    piece_win.push([row, index]);\n    index--;\n  }\n\n  index = col + 1;\n  while (index <= board.length - 1 && board[row][index] === turn) {\n    piece_win.push([row, index]);\n    index++;\n  }\n  if (piece_win.length >= 4) {\n    piece_win.push([row, col]);\n    return piece_win;\n  }\n\n  // check row\n  index = row - 1;\n  piece_win = [];\n  while (index >= 0 && board[index][col] === turn) {\n    piece_win.push([index, col]);\n    index--;\n  }\n\n  index = row + 1;\n  while (index >= 0 && index < board.length - 1 && board[index][col] === turn) {\n    piece_win.push([index, col]);\n    index++;\n  }\n  if (piece_win.length >= 4) {\n    piece_win.push([row, col]);\n    return piece_win;\n  }\n\n  // check diagonal left\n  let row_index = row - 1;\n  let col_index = col - 1;\n  piece_win = [];\n\n  while (\n    row_index >= 0 &&\n    col_index >= 0 &&\n    board[row_index][col_index] === turn\n  ) {\n    piece_win.push([row_index, col_index]);\n    row_index--;\n    col_index--;\n  }\n\n  row_index = row + 1;\n  col_index = col + 1;\n  while (\n    row_index >= 0 &&\n    col_index >= 0 &&\n    row_index <= board.length - 1 &&\n    col_index <= board.length - 1 &&\n    board[row_index][col_index] === turn\n  ) {\n    piece_win.push([row_index, col_index]);\n    row_index++;\n    col_index++;\n  }\n  if (piece_win.length >= 4) {\n    piece_win.push([row, col]);\n    return piece_win;\n  }\n  // check diagonal left\n  row_index = row - 1;\n  col_index = col + 1;\n  piece_win = [];\n  while (\n    col_index >= 0 &&\n    row_index >= 0 &&\n    col_index <= board.length - 1 &&\n    board[row_index][col_index] === turn\n  ) {\n    piece_win.push([row_index, col_index]);\n    row_index--;\n    col_index++;\n  }\n  row_index = row + 1;\n  col_index = col - 1;\n  while (\n    row_index >= 0 &&\n    row_index <= board.length - 1 &&\n    col_index >= 0 &&\n    board[row_index][col_index] === turn\n  ) {\n    piece_win.push([row_index, col_index]);\n    row_index++;\n    col_index--;\n  }\n  if (piece_win.length >= 4) {\n    piece_win.push([row, col]);\n    return piece_win;\n  }\n  return [];\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}