{"ast":null,"code":"import _toConsumableArray from \"/Users/thunguyen/Downloads/tic-tac-toe-valentine/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"/Users/thunguyen/Downloads/tic-tac-toe-valentine/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _this = this,\n  _jsxFileName = \"/Users/thunguyen/Downloads/tic-tac-toe-valentine/src/containers/home.container.js\";\nimport React, { useState } from \"react\";\nimport Home from \"../components/home\";\nimport * as actions from \"../actions/home.action\";\nimport { pieces } from \"../constants/action.types\";\nimport { isWinning } from \"../algorithm/main\";\nvar HomeContainer = function HomeContainer(props) {\n  var numberCell = props.numberCell,\n    currentPiece = props.currentPiece,\n    arrayBoard = props.arrayBoard,\n    onSetNumberCell = props.onSetNumberCell,\n    onInitArray = props.onInitArray,\n    onTick = props.onTick,\n    onSwitchPiece = props.onSwitchPiece;\n  var _useState = useState(0),\n    _useState2 = _slicedToArray(_useState, 2),\n    count = _useState2[0],\n    setCount = _useState2[1];\n  var _useState3 = useState(-1),\n    _useState4 = _slicedToArray(_useState3, 2),\n    isWin = _useState4[0],\n    setWin = _useState4[1];\n  var _useState5 = useState(null),\n    _useState6 = _slicedToArray(_useState5, 2),\n    piecesWin = _useState6[0],\n    setPiecesWin = _useState6[1];\n  var _useState7 = useState(false),\n    _useState8 = _slicedToArray(_useState7, 2),\n    work = _useState8[0],\n    setWork = _useState8[1];\n  console.log('updated state', {\n    isWin: isWin,\n    piecesWin: piecesWin,\n    work: work\n  });\n  var _tick = function tick(row, col) {\n    if (isWin === 1) {\n      return;\n    }\n    // setWork(true)\n    // console.log({isWin, piecesWin, work})\n    // count number of tick \n    var count_tmp = count + 1;\n    setCount(count_tmp);\n\n    // update board \n    var newArray = _toConsumableArray(arrayBoard);\n    newArray[row][col] = currentPiece;\n    onTick(newArray);\n\n    // check win \n    var updatedPiecesWin = isWinning(newArray, row, col, currentPiece);\n    console.log(\"ðŸš€ ~ tick ~ updatedPiecesWin:\", updatedPiecesWin);\n    if (updatedPiecesWin.length > 0) {\n      setWork(true);\n      setWin(1);\n      setPiecesWin(updatedPiecesWin);\n      console.log(\"ðŸš€ ~ tick ~ updatedPiecesWin.length:\", updatedPiecesWin.length);\n    } else if (count_tmp == numberCell * numberCell) {\n      setWin(0);\n    } else {\n      // switch player\n      onSwitchPiece(currentPiece == pieces.X ? pieces.O : pieces.X);\n    }\n  };\n  var _reset_map = function reset_map() {\n    onInitArray(Array(numberCell).fill(null).map(function () {\n      return Array(numberCell).fill(null);\n    }));\n    onSwitchPiece(pieces.X);\n    setCount(0);\n    setWin(-1);\n    setPiecesWin(null);\n  };\n  return /*#__PURE__*/React.createElement(Home, {\n    setNumberCell: function setNumberCell(val) {\n      var result = parseInt(val);\n      onSetNumberCell(result);\n      onInitArray(Array(result).fill(null).map(function () {\n        return Array(result).fill(null);\n      }));\n    },\n    arrayBoard: arrayBoard,\n    tick: function tick(row, col) {\n      return _tick(row, col);\n    },\n    currentPiece: currentPiece,\n    is_win: isWin,\n    pieces_win: piecesWin,\n    reset_map: function reset_map() {\n      return _reset_map();\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 5\n    }\n  });\n};\nexport default HomeContainer;","map":{"version":3,"names":["React","useState","Home","actions","pieces","isWinning","HomeContainer","props","numberCell","currentPiece","arrayBoard","onSetNumberCell","onInitArray","onTick","onSwitchPiece","_useState","_useState2","_slicedToArray","count","setCount","_useState3","_useState4","isWin","setWin","_useState5","_useState6","piecesWin","setPiecesWin","_useState7","_useState8","work","setWork","console","log","tick","row","col","count_tmp","newArray","_toConsumableArray","updatedPiecesWin","length","X","O","reset_map","Array","fill","map","createElement","setNumberCell","val","result","parseInt","is_win","pieces_win","__self","_this","__source","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["/Users/thunguyen/Downloads/tic-tac-toe-valentine/src/containers/home.container.js"],"sourcesContent":["import React, { useState } from \"react\";\n\nimport Home from \"../components/home\";\nimport * as actions from \"../actions/home.action\";\nimport { pieces } from \"../constants/action.types\";\nimport { isWinning } from \"../algorithm/main\";\n\nconst HomeContainer = (props) => {\n  const { numberCell,\n    currentPiece,\n    arrayBoard,\n    onSetNumberCell,\n    onInitArray,\n    onTick,\n    onSwitchPiece,\n    // tick, isWin, piecesWin, reset_map\n  \n  } = props\n\n\n  const [count, setCount] = useState(0)\n  const [isWin, setWin] = useState(-1)\n  const [piecesWin, setPiecesWin] = useState(null)\n  const [work, setWork] = useState(false)\n  console.log( 'updated state',{isWin, piecesWin, work})\n  \n  const tick= (row, col) => {\n    if (isWin === 1) {\n      return;\n    }\n    // setWork(true)\n    // console.log({isWin, piecesWin, work})\n    // count number of tick \n    let count_tmp = count + 1;\n    setCount(count_tmp );\n\n    // update board \n    let newArray = [...arrayBoard];\n    newArray[row][col] = currentPiece;\n    onTick(newArray);\n\n    // check win \n    const updatedPiecesWin = isWinning(newArray, row, col, currentPiece);\n    console.log(\"ðŸš€ ~ tick ~ updatedPiecesWin:\", updatedPiecesWin)\n    if (updatedPiecesWin.length > 0) {\n      setWork(true)\n      setWin(1)\n      setPiecesWin(updatedPiecesWin)\n    \n      console.log(\"ðŸš€ ~ tick ~ updatedPiecesWin.length:\", updatedPiecesWin.length)\n    } else if (count_tmp ==  numberCell * numberCell) {\n      setWin(0)\n    } else {\n      // switch player\n      onSwitchPiece(currentPiece == pieces.X ? pieces.O : pieces.X);\n    }\n  }\n\n  const reset_map = () => {\n    onInitArray(\n      Array(numberCell)\n        .fill(null)\n        .map(() => Array(numberCell).fill(null))\n    );\n    onSwitchPiece(pieces.X);\n    setCount(0)\n    setWin(-1)\n    setPiecesWin(null)\n  }\n  \n\n  return (\n    <Home\n      setNumberCell={val => {\n        const result = parseInt(val);\n        onSetNumberCell(result);\n        onInitArray(\n          Array(result)\n            .fill(null)\n            .map(() => Array(result).fill(null))\n        );\n      }}\n      arrayBoard={arrayBoard}\n      tick={(row, col) => tick(row, col)}\n      currentPiece={currentPiece}\n      is_win={isWin}\n      pieces_win={piecesWin}\n      reset_map={() => reset_map()}\n    />\n  );\n}\n\nexport default HomeContainer"],"mappings":"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"},"metadata":{},"sourceType":"module"}