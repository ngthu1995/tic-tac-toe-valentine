{"ast":null,"code":"import React, { useState, useEffect } from 'react';\nvar WheelComponent = function WheelComponent(_ref) {\n  var segments = _ref.segments,\n    segColors = _ref.segColors,\n    winningSegment = _ref.winningSegment,\n    onFinished = _ref.onFinished,\n    _ref$primaryColor = _ref.primaryColor,\n    primaryColor = _ref$primaryColor === void 0 ? 'black' : _ref$primaryColor,\n    _ref$contrastColor = _ref.contrastColor,\n    contrastColor = _ref$contrastColor === void 0 ? 'white' : _ref$contrastColor,\n    _ref$buttonText = _ref.buttonText,\n    buttonText = _ref$buttonText === void 0 ? 'Spin' : _ref$buttonText,\n    _ref$isOnlyOnce = _ref.isOnlyOnce,\n    isOnlyOnce = _ref$isOnlyOnce === void 0 ? true : _ref$isOnlyOnce,\n    _ref$size = _ref.size,\n    size = _ref$size === void 0 ? 290 : _ref$size,\n    _ref$upDuration = _ref.upDuration,\n    upDuration = _ref$upDuration === void 0 ? 100 : _ref$upDuration,\n    _ref$downDuration = _ref.downDuration,\n    downDuration = _ref$downDuration === void 0 ? 1000 : _ref$downDuration,\n    _ref$fontFamily = _ref.fontFamily,\n    fontFamily = _ref$fontFamily === void 0 ? 'proxima-nova' : _ref$fontFamily;\n  var currentSegment = '';\n  var isStarted = false;\n  var _useState = useState(false),\n    isFinished = _useState[0],\n    setFinished = _useState[1];\n  var timerHandle = 0;\n  var timerDelay = segments.length;\n  var angleCurrent = 0;\n  var angleDelta = 0;\n  var canvasContext = null;\n  var maxSpeed = Math.PI / (\"\" + segments.length);\n  var upTime = segments.length * upDuration;\n  var downTime = segments.length * downDuration;\n  var spinStart = 0;\n  var frames = 0;\n  var centerX = 300;\n  var centerY = 300;\n  useEffect(function () {\n    wheelInit();\n    setTimeout(function () {\n      window.scrollTo(0, 1);\n    }, 0);\n  }, []);\n  var wheelInit = function wheelInit() {\n    initCanvas();\n    wheelDraw();\n  };\n  var initCanvas = function initCanvas() {\n    var canvas = document.getElementById('canvas');\n    console.log(navigator);\n    if (navigator.userAgent.indexOf('MSIE') !== -1) {\n      canvas = document.createElement('canvas');\n      canvas.setAttribute('width', 1000);\n      canvas.setAttribute('height', 600);\n      canvas.setAttribute('id', 'canvas');\n      document.getElementById('wheel').appendChild(canvas);\n    }\n    canvas.addEventListener('click', spin, false);\n    canvasContext = canvas.getContext('2d');\n  };\n  var spin = function spin() {\n    isStarted = true;\n    if (timerHandle === 0) {\n      spinStart = new Date().getTime();\n      maxSpeed = Math.PI / segments.length;\n      frames = 0;\n      timerHandle = setInterval(onTimerTick, timerDelay);\n    }\n  };\n  var onTimerTick = function onTimerTick() {\n    frames++;\n    draw();\n    var duration = new Date().getTime() - spinStart;\n    var progress = 0;\n    var finished = false;\n    if (duration < upTime) {\n      progress = duration / upTime;\n      angleDelta = maxSpeed * Math.sin(progress * Math.PI / 2);\n    } else {\n      if (winningSegment) {\n        if (currentSegment === winningSegment && frames > segments.length) {\n          progress = duration / upTime;\n          angleDelta = maxSpeed * Math.sin(progress * Math.PI / 2 + Math.PI / 2);\n          progress = 1;\n        } else {\n          progress = duration / downTime;\n          angleDelta = maxSpeed * Math.sin(progress * Math.PI / 2 + Math.PI / 2);\n        }\n      } else {\n        progress = duration / downTime;\n        angleDelta = maxSpeed * Math.sin(progress * Math.PI / 2 + Math.PI / 2);\n      }\n      if (progress >= 1) finished = true;\n    }\n    angleCurrent += angleDelta;\n    while (angleCurrent >= Math.PI * 2) {\n      angleCurrent -= Math.PI * 2;\n    }\n    if (finished) {\n      setFinished(true);\n      onFinished(currentSegment);\n      clearInterval(timerHandle);\n      timerHandle = 0;\n      angleDelta = 0;\n    }\n  };\n  var wheelDraw = function wheelDraw() {\n    clear();\n    drawWheel();\n    drawNeedle();\n  };\n  var draw = function draw() {\n    clear();\n    drawWheel();\n    drawNeedle();\n  };\n  var drawSegment = function drawSegment(key, lastAngle, angle) {\n    var ctx = canvasContext;\n    var value = segments[key];\n    ctx.save();\n    ctx.beginPath();\n    ctx.moveTo(centerX, centerY);\n    ctx.arc(centerX, centerY, size, lastAngle, angle, false);\n    ctx.lineTo(centerX, centerY);\n    ctx.closePath();\n    ctx.fillStyle = segColors[key];\n    ctx.fill();\n    ctx.stroke();\n    ctx.save();\n    ctx.translate(centerX, centerY);\n    ctx.rotate((lastAngle + angle) / 2);\n    ctx.fillStyle = contrastColor;\n    ctx.font = 'bold 1em ' + fontFamily;\n    ctx.fillText(value.substr(0, 21), size / 2 + 20, 0);\n    ctx.restore();\n  };\n  var drawWheel = function drawWheel() {\n    var ctx = canvasContext;\n    var lastAngle = angleCurrent;\n    var len = segments.length;\n    var PI2 = Math.PI * 2;\n    ctx.lineWidth = 1;\n    ctx.strokeStyle = primaryColor;\n    ctx.textBaseline = 'middle';\n    ctx.textAlign = 'center';\n    ctx.font = '1em ' + fontFamily;\n    for (var i = 1; i <= len; i++) {\n      var angle = PI2 * (i / len) + angleCurrent;\n      drawSegment(i - 1, lastAngle, angle);\n      lastAngle = angle;\n    }\n    ctx.beginPath();\n    ctx.arc(centerX, centerY, 50, 0, PI2, false);\n    ctx.closePath();\n    ctx.fillStyle = primaryColor;\n    ctx.lineWidth = 10;\n    ctx.strokeStyle = contrastColor;\n    ctx.fill();\n    ctx.font = 'bold 1em ' + fontFamily;\n    ctx.fillStyle = contrastColor;\n    ctx.textAlign = 'center';\n    ctx.fillText(buttonText, centerX, centerY + 3);\n    ctx.stroke();\n    ctx.beginPath();\n    ctx.arc(centerX, centerY, size, 0, PI2, false);\n    ctx.closePath();\n    ctx.lineWidth = 10;\n    ctx.strokeStyle = primaryColor;\n    ctx.stroke();\n  };\n  var drawNeedle = function drawNeedle() {\n    var ctx = canvasContext;\n    ctx.lineWidth = 1;\n    ctx.strokeStyle = contrastColor;\n    ctx.fileStyle = contrastColor;\n    ctx.beginPath();\n    ctx.moveTo(centerX + 20, centerY - 50);\n    ctx.lineTo(centerX - 20, centerY - 50);\n    ctx.lineTo(centerX, centerY - 70);\n    ctx.closePath();\n    ctx.fill();\n    var change = angleCurrent + Math.PI / 2;\n    var i = segments.length - Math.floor(change / (Math.PI * 2) * segments.length) - 1;\n    if (i < 0) i = i + segments.length;\n    ctx.textAlign = 'center';\n    ctx.textBaseline = 'middle';\n    ctx.fillStyle = primaryColor;\n    ctx.font = 'bold 1.5em ' + fontFamily;\n    currentSegment = segments[i];\n    isStarted && ctx.fillText(currentSegment, centerX + 10, centerY + size + 50);\n  };\n  var clear = function clear() {\n    var ctx = canvasContext;\n    ctx.clearRect(0, 0, 1000, 800);\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    id: \"wheel\"\n  }, /*#__PURE__*/React.createElement(\"canvas\", {\n    id: \"canvas\",\n    width: \"1000\",\n    height: \"800\",\n    style: {\n      pointerEvents: isFinished && isOnlyOnce ? 'none' : 'auto'\n    }\n  }));\n};\nexport default WheelComponent;","map":null,"metadata":{},"sourceType":"module"}